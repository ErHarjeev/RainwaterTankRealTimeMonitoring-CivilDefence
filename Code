/*  Rainwater Tank Real-Time Monitoring
    By: Harjeev Sharma 
    
 @param: 
 * IoT_Update_ms -> Sets the time to update data on MQTT server (in ms)
 * MobileNumber -> Enter the Mobile number for SMS Alert Messagaes
 * ssid -> Enter SSID of wifi
 * password -> Enter wifi password
 * UniqueID -> Unique Client ID for a device
*/

/*------ Libraries ----- */
#include <WiFi.h>
#include <PubSubClient.h>
#include <Wire.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <SoftwareSerial.h>
#include <SFE_BMP180.h>

/*------ I/O Pins ----- */
#define ONE_WIRE_BUS    32      // Temperature Sensor
#define pHSensorPin     35      //pH meter Analog output to Arduino Analog Input 0
#define LED             13        
#define ECSensorPin     33      //EC Sensor
#define ECSensorPin_H   25      //EC Sensor High Pin
#define ECSensorPin_L   26      // EC Sensor Low Pin
#define LightSensor     34      // Light Sensor


/*------ Objects  ----- */
SoftwareSerial mySerial(23, 19); //SIM800L Tx & Rx is connected to Arduino #23 & #19
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature tempSensor(&oneWire);
SFE_BMP180 pressure;
WiFiClient espClient;
PubSubClient client(espClient);


/*------ Constants  ----- */
#define IoT_Update_ms   60000     // IOT update time in ms for all sensors
#define pH_Offset           0.06       //deviation compensate for ph Sensor
#define pHsamplingInterval  20   
#define printInterval       800
#define pHArrayLength       40         //times of collection
#define pHLowerLimit        4         // LOWER alert limit for pH
#define pHHigherLimit       8          // HIGHER alert limit for pH
#define lightSamplingInterval 20
#define LightArrayLenth     40          //times of collection
const float ESPVoltage      = 3.3;      // CHANGE THIS FOR Arduinos
const float ADCResolution   = ESPVoltage /1024.0;
const float ECresistorValue = 2000.0;
const char *UniqueID    = "ID2208358"  ;        // Change ID for every new customer
const char *User        = "HS"  ;               // Change user for every new customer
const char *Password    = "Pass"  ;             // Change password for every new customer
const char *MainTopic   = "RainWaterTank/"  ;   // Main Topic
const char *MobileNumber  = "+64273279722"  ;    // Change ID for every new customer
//const char* ssid          = "VodafoneWB2.4HS";  // Enter Wifi ID
//const char* password      = "E8806F690122";     // Enter Wifi Password
const char* mqtt_server   = "rwtweltec.ddns.net"; //Add your MQTT Broker IP address
const char* ssid = "vodafoneC45242";
const char* password = "Crazypeople007";
//const char* mqtt_server = "raspberrypi";
//const char* mqtt_server = "192.168.1.144";

/*------ Variables  ----- */
int   pHArray[pHArrayLength];           //Store the average value of the sensor feedback
int   pHArrayIndex=0;
int   lightArray[pHArrayLength];        //Store the average value of the sensor feedback
int   lightArrayIndex=0;
int   threshold = 3;                    //EC Sensor
char  topicID[50];
float Temperature = 0;
float Pressure = 5;
float pH = 10;
float EC = 15;
float Light = 20;
long  lastMsg = 0;

/*----------------- PINS AND GLOBAL VAIRABLES ENDS------------------*/
/*------------------------------------------------------------------*/
/*-------------------- LIGHT SENSOR START --------------------------*/
float lux_value(int pin_number)
{
  float lumIntensity = 0, volts = 0, amps = 0; // across 10,000 Ohms
  float microamps = 0, lux = 0;
  int8_t sampleNos = 10;          // set the number of samples
  float luxArray[sampleNos] ;
  int8_t sampleCount = 0;
 
  while(sampleCount < sampleNos){
    lumIntensity =  analogRead(pin_number);
    volts = lumIntensity * 3.3 / 4096.0;
    amps = volts / 10000.0; // across 10,000 Ohms
    microamps = amps * 1000000;
    lux = microamps * 2.0;
    luxArray[sampleCount++] = lux; 
  }
    
  sampleCount = 0;
  lumIntensity = 0;
  while(sampleCount < sampleNos){
    lumIntensity = lumIntensity + luxArray[sampleCount++] ;
  }
  lumIntensity = lumIntensity/sampleNos ;
  
  return lumIntensity;
}

/*-------------------- LIGHT SENSOR END -----------------------------*/
/*------------------------------------------------------------------*/
/*-------------------- Pressure SENSOR start ------------------------*/
float Pressure_Value()
{
    char status;
    double T, P; //, p0, a;
    status = pressure.startTemperature();
    if (status != 0)
    {
      delay(status);
      status = pressure.getTemperature(T);
      if (status != 0){
        status = pressure.startPressure(3);
        if (status != 0){
          delay(status);
          status = pressure.getPressure(P, T);
          if (status != 0){
                P= float(P);
          }
            else { 
              P = 0;
            }
        }
      }  
    }
  return P;  
}    
/*-------------------- Pressure SENSOR end ------------------------*/
/*------------------------------------------------------------------*/
/*--------------- WIFI & MQTT SETUP START --------------------------*/

void setup_wifi() {
  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* message, unsigned int length) {
  Serial.print("Message arrived on topic: ");
  Serial.print(topic);
  Serial.print(". Message: ");
  String messageTemp;
  
  for (int i = 0; i < length; i++) {
    Serial.print((char)message[i]);
    messageTemp += (char)message[i];
  }
  Serial.println();
  if (String(topic) == "esp32/output") {
    Serial.print("Changing output to ");
    if(messageTemp == "on"){
      Serial.println("on");
     // digitalWrite(ledPin, HIGH);
    }
    else if(messageTemp == "off"){
      Serial.println("off");
    //  digitalWrite(ledPin, LOW);
    }
  }
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    if (client.connect("ESP8266Client")) {
      Serial.println("connected");
      // Subscribe
      client.subscribe("esp32/output");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}
/*---------------  WIFI & MQTT SETUP END ---------------------------*/
/*------------------------------------------------------------------*/
/*-------------------- GSM MODEM MESSAGE STTART --------------------*/

void alertMessage(){
  mySerial.println("AT"); //Once the handshake test is successful, it will back to OK
  gsmUpdateSerial();
  mySerial.println("AT+CMGF=1"); // Configuring TEXT mode
  gsmUpdateSerial();
  mySerial.println("AT+CMGS=\"+64273279722\"");;//change ZZ with country code and xxxxxxxxxxx with phone number to sms
  gsmUpdateSerial();
  mySerial.print("Water Quality Alert...."); //text content
  gsmUpdateSerial();
  mySerial.write(26);
}

void gsmUpdateSerial()
{
  delay(500);
  while (Serial.available()) {
    mySerial.write(Serial.read());//Forward what Serial received to Software Serial Port
  }
  while(mySerial.available()) {
    Serial.write(mySerial.read());//Forward what Software Serial received to Serial Port
  }
}
/*-------------------- GSM MODEM MESSAGE END --------------------*/
/*------------------------------------------------------------------*/
/*-------------------- pH Sensor Start ---------------------------------*/
float phSensorRead(){
  
  unsigned long samplingTime = millis();
  unsigned long printTime = millis();
   float pHValue,voltage;
   pHArrayIndex=0 ;

   while(pHArrayIndex < pHArrayLength){
    if(millis()-samplingTime > pHsamplingInterval){
        pHArray[pHArrayIndex++]=analogRead(pHSensorPin);
        //if(pHArrayIndex==pHArrayLength)pHArrayIndex=0;
        voltage = avergearray(pHArray, pHArrayLength)*3.3/1024;
        pHValue = 3.9*voltage + pH_Offset;         // changed the multiplier here 
        samplingTime=millis();
      }
   }
return pHValue; 
}

double avergearray(int* arr, int number){
  int i;
  int max,min;
  double avg;
  long amount=0;
  if(number<=0){
    Serial.println("Error number for the array to avraging!/n");
    return 0;
  }
  if(number<5){   //less than 5, calculated directly statistics
    for(i=0;i<number;i++){
      amount+=arr[i];
    }
    avg = amount/number;
    return avg;
  }else{
    if(arr[0]<arr[1]){
      min = arr[0];max=arr[1];
    }
    else{
      min=arr[1];max=arr[0];
    }
    for(i=2;i<number;i++){
      if(arr[i]<min){
        amount+=min;        //arr<min
        min=arr[i];
      }else {
        if(arr[i]>max){
          amount+=max;    //arr>max
          max=arr[i];
        }else{
          amount+=arr[i]; //min<=arr<=max
        }
      }//if
    }//for
    avg = (double)amount/(number-2);
  }//if
  return avg;
}

/*-------------------- pH Sensor ENd --------------------*/
/*------------------------------------------------------------------*/
/*-------------------- EC Sensor start --------------------*/

float ECSensorRead(){
  int analogValue=0;
  int oldAnalogValue=1000;
  float returnVoltage=0.0;
  float resistance=0.0;
  double Siemens;
  float TDS=0.0;
  digitalWrite( ECSensorPin_H, LOW );
  digitalWrite( ECSensorPin_L, HIGH );
  delay(10); // allow ringing to stop
  digitalWrite( ECSensorPin_H, HIGH );
  digitalWrite( ECSensorPin_L, LOW );
  delay(10); // allow ringing to stop
  digitalWrite( ECSensorPin_H, LOW );
  digitalWrite( ECSensorPin_L, HIGH );
  delay(10); // allow ringing to stop
  digitalWrite( ECSensorPin_H, HIGH );
  digitalWrite( ECSensorPin_L, LOW );
  delay(10); // allow ringing to stop
  analogValue = analogRead( ECSensorPin );
  digitalWrite( ECSensorPin_H, LOW );
  digitalWrite( ECSensorPin_L, LOW );
  returnVoltage = analogValue * ADCResolution;
  resistance = (( ECresistorValue/returnVoltage) * (ESPVoltage - returnVoltage));
  Siemens = 1000000.0/((resistance) * (1 + (0.025*(Temperature - 18))));
  TDS = 500 * (Siemens/1000);
  return TDS;  
 }

/*-------------------- EC Sensor End ---------------------------------*/
/*------------------------------------------------------------------*/
/*-------------------- SETUP START ---------------------------------*/

void setup() {
  Serial.begin(115200);
  pinMode(LED,OUTPUT);
  analogReadResolution(10);
  
  tempSensor.begin();         // temperature sensor begin
  mySerial.begin(9600);       // gsm modem communication

 pinMode(ECSensorPin_H, OUTPUT);
 pinMode(ECSensorPin_L, OUTPUT);
 pinMode(ECSensorPin, INPUT);
  
  if (pressure.begin())
    Serial.println("BMP180 init success");
    else
    {
    Serial.println("BMP180 init fail\n\n");
    Serial.println("Check connection");
    while (1);
    }

  strcpy(topicID,MainTopic);
  strcat(topicID,UniqueID);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

/*--------------------------- SETUP END  ---------------------------*/
/*------------------------------------------------------------------*/
/*----------------------- MAIN LOOP START --------------------------*/


void loop() {
 /*-------- wifi mqtt ---------------*/
   if (!client.connected()) {
    reconnect();
  }
  client.loop();


  long now = millis();
  if (now - lastMsg > IoT_Update_ms) {
    lastMsg = now;

     /*-------- Light Sensor ---------------*/
    Light = lux_value(LightSensor);     // READ LIGHT SENSOR
    // Call sensors.requestTemperatures() to issue a global temperature and Requests to all devices on the bus
    /*-------- Temperature Sensor ---------------*/
    tempSensor.requestTemperatures(); 
    Temperature = float(tempSensor.getTempCByIndex(0));
    /*-------- Pressure Sensor ---------------*/
    Pressure = Pressure_Value();
    /*-------- pH Sensor ---------------*/
    pH = phSensorRead();
    /*-------- Alert Message ---------------*/
    if (pH > pHHigherLimit | pH < pHLowerLimit)  {      // set the value of ph reference 
      alertMessage();               
    }
    /*-------- EC Sensor ---------------*/
    EC = ECSensorRead();
    
     /*-------- Convert Value to Char ---------------*/ 
    char pHString[8];
    dtostrf(pH, 1, 2, pHString);
    char ECString[8];
    dtostrf(EC, 1, 2, ECString);
    char TempString[8];
    dtostrf(Temperature, 1, 2, TempString);
    char LightString[8];
    dtostrf(Light, 1, 2, LightString);
    char PressureString[8];
    dtostrf(Pressure, 1, 2, PressureString);
    
    /*-------- Convert Data to String ---------------*/
    String datafinal;
    datafinal = UniqueID;
    datafinal += ";";
    datafinal += User;
    datafinal += ";";
    datafinal += Password;
    datafinal += ";pH=";
    datafinal += pHString ;
    datafinal += ";EC=";
    datafinal += ECString ;
    datafinal += ";Temperature=";
    datafinal += TempString ;
    datafinal += ";Light=";
    datafinal += LightString ;
    datafinal += ";Pressure=";
    datafinal += PressureString ;
    datafinal += ";";

    int str_len = datafinal.length() + 1; 
    char finaldata_array[str_len];
    datafinal.toCharArray(finaldata_array, str_len);
 
    Serial.print(topicID);
    Serial.print(" : ");
    Serial.println(finaldata_array);
    client.publish(topicID,finaldata_array );

     //Temperature= random(0,60);
    // Pressure= random(0,1000);
    // pH= random(0,12);
    // EC= random(0,1000);
    //Light= random(0,100); 
  }
}
/*----------------------- MAIN LOOP END --------------------------*/
/*------------------------------------------------------------------*/
